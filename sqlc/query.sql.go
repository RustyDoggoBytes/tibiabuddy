// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package sqlc

import (
	"context"
	"database/sql"
)

const createSession = `-- name: CreateSession :one
INSERT INTO user_sessions (
	id,
	user_id
) VALUES (
	?, ?
)
RETURNING id, user_id, created
`

type CreateSessionParams struct {
	ID     string
	UserID string
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (UserSession, error) {
	row := q.db.QueryRowContext(ctx, createSession, arg.ID, arg.UserID)
	var i UserSession
	err := row.Scan(&i.ID, &i.UserID, &i.Created)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (
	email,
	hashed_password
) VALUES (
	?, ?
)
RETURNING id, email, hashed_password
`

type CreateUserParams struct {
	Email          string
	HashedPassword []byte
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Email, arg.HashedPassword)
	var i User
	err := row.Scan(&i.ID, &i.Email, &i.HashedPassword)
	return i, err
}

const deleteFormerName = `-- name: DeleteFormerName :exec
DELETE FROM former_names WHERE name = ?
`

func (q *Queries) DeleteFormerName(ctx context.Context, name sql.NullString) error {
	_, err := q.db.ExecContext(ctx, deleteFormerName, name)
	return err
}

const deleteSession = `-- name: DeleteSession :exec
DELETE FROM user_sessions where id = ?
`

func (q *Queries) DeleteSession(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteSession, id)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
;

DELETE FROM users where id = ?
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getFormerNames = `-- name: GetFormerNames :many
SELECT 
	name,
	notification_emails, 
	last_checked,
	last_updated_status, 
	status
FROM
	former_names
`

type GetFormerNamesRow struct {
	Name               sql.NullString
	NotificationEmails sql.NullString
	LastChecked        sql.NullTime
	LastUpdatedStatus  sql.NullTime
	Status             sql.NullString
}

func (q *Queries) GetFormerNames(ctx context.Context) ([]GetFormerNamesRow, error) {
	rows, err := q.db.QueryContext(ctx, getFormerNames)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFormerNamesRow
	for rows.Next() {
		var i GetFormerNamesRow
		if err := rows.Scan(
			&i.Name,
			&i.NotificationEmails,
			&i.LastChecked,
			&i.LastUpdatedStatus,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSession = `-- name: GetSession :one
SELECT 
	id,
	user_id
FROM
	user_sessions
WHERE
	id = ?
LIMIT 1
`

type GetSessionRow struct {
	ID     string
	UserID string
}

func (q *Queries) GetSession(ctx context.Context, id string) (GetSessionRow, error) {
	row := q.db.QueryRowContext(ctx, getSession, id)
	var i GetSessionRow
	err := row.Scan(&i.ID, &i.UserID)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT 
	id,
	email,
	hashed_password
FROM 
	users 
WHERE
	email = ?
`

func (q *Queries) GetUser(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, email)
	var i User
	err := row.Scan(&i.ID, &i.Email, &i.HashedPassword)
	return i, err
}

const saveFormerName = `-- name: SaveFormerName :exec
INSERT OR REPLACE INTO former_names (
	id, 
	name,
	notification_emails, 
	last_checked, 
	last_updated_status, 
	status
) VALUES (
(SELECT id FROM former_names fn WHERE fn.name = ?), ?, ?, ?, ?, ?)
`

type SaveFormerNameParams struct {
	Name               sql.NullString
	Name_2             sql.NullString
	NotificationEmails sql.NullString
	LastChecked        sql.NullTime
	LastUpdatedStatus  sql.NullTime
	Status             sql.NullString
}

func (q *Queries) SaveFormerName(ctx context.Context, arg SaveFormerNameParams) error {
	_, err := q.db.ExecContext(ctx, saveFormerName,
		arg.Name,
		arg.Name_2,
		arg.NotificationEmails,
		arg.LastChecked,
		arg.LastUpdatedStatus,
		arg.Status,
	)
	return err
}
